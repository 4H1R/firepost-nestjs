// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  username        String    @unique
  password        String
  email           String    @unique
  image           String?
  bio             String?
  website         String?
  isVerified      Boolean   @default(false)
  emailVerifiedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accessTokens AccessToken[]
  followers    UserFollower[] @relation(name: "followers")
  followings   UserFollower[] @relation(name: "followings")
  posts        Post[]
  postSaves    PostSave[]
  postLikes    PostLike[]
  postComments PostComment[]
  sendMessages Message[]      @relation(name: "sendings")
  messages     Message[]      @relation(name: "receivings")

  @@map("users")
}

model AccessToken {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int
  token  String

  usedAt    DateTime @default(now())
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_tokens")
}

model UserFollower {
  userId     Int
  followerId Int

  createdAt DateTime @default(now())

  user     User @relation(name: "followers", fields: [userId], references: [id], onDelete: Cascade)
  follower User @relation(name: "followings", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([userId, followerId])
  @@map("user_followers")
}

model Post {
  id          Int    @id @default(autoincrement())
  userId      Int
  description String
  image       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  saves    PostSave[]
  likes    PostLike[]
  comments PostComment[]

  @@map("posts")
}

model PostSave {
  userId Int
  postId Int

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("post_saves")
}

model PostLike {
  userId Int
  postId Int

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("post_likes")
}

model PostComment {
  id       Int    @id @default(autoincrement())
  text     String
  userId   Int
  postId   Int
  parentId Int?

  createdAt DateTime @default(now())

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent      PostComment?  @relation(name: "parent", fields: [parentId], references: [id])
  subComments PostComment[] @relation(name: "parent")

  @@map("post_comments")
}

model Message {
  id       Int    @id @default(autoincrement())
  text     String
  senderId Int
  userId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender User @relation(name: "sendings", fields: [senderId], references: [id], onDelete: Cascade)
  user   User @relation(name: "receivings", fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}
